{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mdtmpl","text":"<p>Tired of copy-pasting your example configurations and command outputs into your README?</p> <p><code>mdtmpl</code> is a dead-simple little CLI tool that runs instructions defined in Markdown comments, such as <code>&lt;!--- {{ my markdown comment }} ---&gt;</code>.</p>"},{"location":"#example","title":"Example","text":"<p>Imagine the following <code>README.md.tmpl</code>, when invoked, <code>mdtmpl</code> will interpret and render the instructions defined within <code>&lt;!---{{ }}---&gt;</code> to the following:</p> <code>README.md.tmpl</code><code>README.md</code> <pre><code>### Example Configuration\nHere are all available configuration options:\n&lt;!--- {{ file \"config.yml\" | code \"yaml\" }} ---&gt;\n\n### List Docker Containers\nYou should now see docker containers running:\n&lt;!--- {{ exec \"docker ps -a\" | truncate | code \"bash\" }} ---&gt;\n</code></pre>"},{"location":"#example-configuration","title":"Example Configuration","text":"<p>Here are all available configuration options:  <pre><code>auth:\n    basic: true\n</code></pre></p>"},{"location":"#list-docker-containers","title":"List Docker Containers","text":"<p>You should now see docker containers running:  <pre><code>CONTAINER ID   IMAGE         COMMAND                  CREATED       STATUS                   PORTS                                       NAMES\ncf4f9cec8faa   registry:2    \"/entrypoint.sh /etc\u2026\"   7 weeks ago   Up 10 seconds            0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp   registry\n006560ea14d9   hello-world   \"/hello\"                 7 weeks ago   Exited (0) 7 weeks ago                                               dreamy_feistel\nd9d050df8a0f   hello-world   \"/hello\"                 7 weeks ago   Exited (0) 7 weeks ago\n</code></pre></p>"},{"location":"installation/","title":"Installation","text":"<p>Find all <code>mdtmpl</code> releases here or simply download the latest by running:</p>"},{"location":"installation/#curl","title":"curl","text":"<pre><code>version=$(curl https://api.github.com/repos/falcosuessgott/mdtmpl/releases/latest -s | jq .name -r)\ncurl -OL \"https://github.com/FalcoSuessgott/mdtmpl/releases/download/${version}/mdtmpl_$(uname)_$(uname -m).tar.gz\"\ntar xzf mdtmpl_$(uname)_$(uname -m).tar.gz\nchmod u+x mdtmpl\n./mdtmpl version\n</code></pre>"},{"location":"installation/#brew","title":"brew","text":"<pre><code>brew install falcosuessgott/tap/mdtmpl\n</code></pre>"},{"location":"installation/#docker","title":"docker","text":"<pre><code>docker run falcosuessgott/mdtmpl\n</code></pre>"},{"location":"pre-commit-hook/","title":"pre-commit hook","text":"<p>Add the following config to your <code>.pre-commit-config.yaml</code> file and adjust the <code>args</code> to your needs. Mae sure to run <code>pre-commit install</code> and <code>pre-commit autoupdate</code> to stick to the latest version: <pre><code>repos:\n  - repo: https://github.com/FalcoSuessgott/mdtmpl\n    rev: v0.0.6\n    hooks:\n      - id: mdtmpl\n        args: [-t=README.md.tmpl, -f, -o=README.md]\n</code></pre></p>"},{"location":"templating/","title":"Templating","text":"<p>A basic <code>mdtmpl</code> instruction looks like this:</p> <pre><code>&lt;!--- {{ &lt;template-function&gt; &lt;arg01&gt; &lt;args02&gt; ... }} ---&gt;\n</code></pre> <p><code>mdtmpl</code> parses the template file and all its markdown comments and renders its instructions. It uses the Go`s Template Engine.</p> <p>Follow this document to see which template functions are supported.</p>"},{"location":"templating/#piping","title":"Piping","text":"<p>You can pipe the output of one instruction to the next template function as its last argument:</p> <pre><code>&lt;!--- {{ &lt;template-function&gt; &lt;arg01&gt; &lt;args02&gt; | &lt;template-function&gt; &lt;args&gt; ... }} ---&gt;\n</code></pre> <p>For example: <code>&lt;!--- {{ \"hello!\" | upper | repeat 5 }} ---&gt;</code> will result in: <code>HELLO!HELLO!HELLO!HELLO!HELLO!</code>.</p>"},{"location":"templating/#template-functions","title":"Template Functions","text":"<p><code>mdtmpl</code> includes all <code>sprout</code> and Go`s predefined template functions.</p> <p>Furthermore, the following functions are also available:</p>"},{"location":"templating/#code-language-content","title":"<code>code \"&lt;language&gt;\" \"&lt;content&gt;\"</code>","text":"<p>Syntax highlight a given content in a specified language within a code block.</p> <code>README.md.tmpl</code><code>README.md</code> <pre><code>&lt;!--- {{ echo \"this is a command\" | code \"bash\" }} ---&gt;\n</code></pre> <p> <pre><code>this is a command\n</code></pre></p>"},{"location":"templating/#exec-command","title":"<code>exec \"&lt;command&gt;\"</code>","text":"<p>Executes a given command and returns the output and an error (if any)</p> <p>Tip</p> <p><code>truncate</code> removes any trailing empty lines. Useful after <code>exec</code></p> <code>README.md.tmpl</code><code>README.md</code> <pre><code>&lt;!--- {{ exec \"echo hello world\" | truncate | code \"bash\" }} ---&gt;\n</code></pre> <p> <pre><code>hello world\n</code></pre></p>"},{"location":"templating/#hook-command","title":"<code>hook \"&lt;command&gt;\"</code>","text":"<p>Executes a given command and returns an error (if any)</p> <p>Tip</p> <p><code>hook</code> is useful for setting things up or commands that produce some resources, such as images that you want to include.</p> <code>README.md.tmpl</code><code>README.md</code> <pre><code>&lt;!--- {{ hook \"docker start vault\" }} ---&gt;\n</code></pre>"},{"location":"templating/#file-path","title":"<code>file \"&lt;path&gt;\"</code>","text":"<p>Includes the content of the given file</p> <pre><code># settings.yml\nsettings:\n    basic_auth: false\n</code></pre> <code>README.md.tmpl</code><code>README.md</code> <pre><code>&lt;!--- {{ file \"settings.yml\" | code \"yaml\" }} ---&gt;\n</code></pre> <p> <pre><code>settings:\n    basic_auth: false\n</code></pre></p>"},{"location":"templating/#filehttp-url","title":"<code>fileHTTP \"&lt;url&gt;\"</code>","text":"<p>Includes the content of the given url</p> <pre><code># settings.yml\nsettings:\n    basic_auth: false\n</code></pre> <code>README.md.tmpl</code><code>README.md</code> <pre><code>&lt;!--- {{ fileHTTP \"https://github.com/settings.yml\" | code \"yaml\" }} ---&gt;\n</code></pre> <p> <pre><code>settings:\n    basic_auth: false\n</code></pre></p>"},{"location":"templating/#filesindir-dir-glob-pattern","title":"<code>filesInDir \"&lt;dir&gt;\" \"&lt;glob-pattern\"&gt;</code>","text":"<p>Returns the paths of all matching files in the specified directory</p> <code>README.md.tmpl</code><code>README.md</code> <pre><code>&lt;!--- {{ filesInDir \".\" \"*.yml\" }} ---&gt;\n</code></pre> <p> [.github/dependabot.yml .github/workflows/lint.yml .github/workflows/mkdocs.yml .github/workflows/release.yml .github/workflows/test.yml .golang-ci.yml .goreleaser.yml cmd/testdata/cfg.yml mkdocs.yml pkg/template/testdata/values.yml]</p>"},{"location":"templating/#tmpl-template-file","title":"<code>tmpl \"&lt;template-file&gt;\"</code>","text":"<p>Includes the rendered content of the given template</p> <pre><code># docs/template.tmpl\nThis is a test {{ exec \"echo template\" }}\n</code></pre> <code>README.md.tmpl</code><code>README.md</code> <pre><code>&lt;!--- {{ tmpl \"docs/template.tmpl\" }} ---&gt;\n</code></pre> <p> This is a test template</p>"},{"location":"templating/#tmplwithvars-template-file-values","title":"<code>tmplWithVars \"&lt;template-file&gt;\" &lt;values&gt;</code>","text":"<p>Renders a given template with the specified template values</p> <pre><code># values.yml\nname: kubernetes\nversion: v1.0.0\n</code></pre> <pre><code># docs/template.tmpl\nThis is another template {{ .name }}-{{ .version }}\n</code></pre> <code>README.md.tmpl</code><code>README.md</code> <pre><code>&lt;!--- {{ tmplWithVars \"docs/template.tmpl\" (file \"values.yml\" | fromYAML) }} ---&gt;\n</code></pre> <p> This is another template kubernetes-v1.0.0</p>"},{"location":"templating/#stripansi-content","title":"<code>stripansi \"&lt;content&gt;\"</code>","text":"<p>Strips any Color Codes from a given content</p> <p>Tip</p> <p>Useful when a command outputs colored output</p> <code>README.md.tmpl</code><code>README.md</code> <pre><code>&lt;!--- {{ exec \"docker ps\" | stripansi | code \"bash\" }} ---&gt;\n</code></pre> <p> <pre><code>CONTAINER ID   IMAGE        COMMAND                  CREATED       STATUS          PORTS                                       NAMES\ncf4f9cec8faa   registry:2   \"/entrypoint.sh /etc\u2026\"   7 weeks ago   Up 29 minutes   0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp   registry\n</code></pre></p>"},{"location":"templating/#toc","title":"<code>toc</code>","text":"<p>Inserts a Markdown Table of Content</p> <p>Note</p> <p>For now it does not work for any headings that are included after <code>toc</code> function invocation. For example when using <code>file</code> or <code>tmpl</code>/<code>tmplWithVars</code></p> <code>README.md.tmpl</code><code>README.md</code> <pre><code># ToC\n&lt;!--- {{ toc }} ---&gt;\n# 1. Heading\n## 2. Heading\n### 3. Heading\n## 4. Heading\n</code></pre> <pre><code># ToC\n- [ToC](#toc)\n- [1. Heading](#1.-heading)\n- [2. Heading](#2.-heading)\n    - [3. Heading](#3.-heading)\n- [4. Heading](#4.-heading)\n\n# 1. Heading\n## 2. Heading\n### 3. Heading\n## 4. Heading\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>Per default, <code>mdtmpl</code> uses <code>README.md.tmpl</code> as the template file (change with <code>-t</code>) and attempts to write the rendered output to <code>README.md</code> (change with <code>-o</code>). If a <code>README.md</code> already exists, you will have to specify <code>--force</code> to overwrite its content. You can enable dry-runs using <code>-d</code>.</p>"},{"location":"usage/#cli-args-environment-vars","title":"CLI Args &amp; Environment Vars","text":"<pre><code>$&gt; mdtmpl -h\ntemplate  Markdown files using Go templates and Markdown comments\n\nUsage:\n  mdtmpl [flags]\n\nFlags:\n  -d, --dry-run           dry run, print output to stdout (env: MDTMPL_DRY_RUN)\n  -f, --force             overwrite output file (env: MDTMPL_FORCE)\n  -h, --help              help for mdtmpl\n  -o, --output string     path to the output file (env: MDTMPL_OUTPUT_FILE) (default \"README.md\")\n  -t, --template string   path to a mdtmpl template file (env: MDTMPL_TEMPLATE_FILE) (default \"README.md.tmpl\")\n      --version           print version (env: MDTMPL_VERSION)\n</code></pre>"}]}